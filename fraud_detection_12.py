# -*- coding: utf-8 -*-
"""Fraud detection 12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11l4iglJdGwdI7bX1-paCEx2zRNYxMcHV
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

# Step 1: Create dummy fraud detection dataset
np.random.seed(42)

n_samples = 1000

amount = np.random.exponential(scale=100, size=n_samples)
transaction_time = np.random.randint(0, 24, size=n_samples)
user_age = np.random.randint(18, 70, size=n_samples)

fraud = (amount > 200) & ((transaction_time < 6) | (transaction_time > 22)) & (user_age < 30)
fraud = fraud.astype(int)

data = pd.DataFrame({
    'amount': amount,
    'transaction_time': transaction_time,
    'user_age': user_age,
    'is_fraud': fraud
})

# Step 2: Prepare data
X = data[['amount', 'transaction_time', 'user_age']]
y = data['is_fraud']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 3: Train Model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 4: Predict on test data
y_pred = model.predict(X_test)

# Step 5: Evaluate
print("\nModel Evaluation:")
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Step 6: User input prediction
print("\n--- Fraud Detection for New Transaction ---")
try:
    input_amount = float(input("Enter transaction amount: "))
    input_time = int(input("Enter transaction time (hour 0-23): "))
    input_age = int(input("Enter user's age: "))

    # Create array for prediction
    user_data = np.array([[input_amount, input_time, input_age]])

    # Predict
    prediction = model.predict(user_data)

    # Output result
    if prediction[0] == 1:
        print("ğŸš¨ ALERT: This transaction is predicted as FRAUD!")
    else:
        print("âœ… This transaction is predicted as NOT FRAUD.")
except Exception as e:
    print(f"Input Error: {e}")

!pip install streamlit
import streamlit as st
import pickle

# Function to download the model
def download_model():
    # Save the model to a file first
    model_file = 'your_model.pkl'
    with open(model_file, 'wb') as f:  # Open in 'wb' mode for writing binary
        pickle.dump(model, f)  # Save the 'model' object

    # Now you can read it back for downloading
    with open(model_file, 'rb') as f:
        model_bytes = f.read()

    st.download_button(
        label="Download Model",
        data=model_bytes,
        file_name='downloaded_model.pkl',
        mime='application/octet-stream'
    )

# Add the download button to your app
download_model()

import pickle
# Save the model to a file named 'model.pkl'
with open('model.pkl', 'wb') as file:
    pickle.dump(model, file)

